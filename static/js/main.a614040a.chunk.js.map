{"version":3,"sources":["components/Task.js","components/NewTask.js","components/Tasks.js","components/Calendar.js","components/buildCal.js","App.js","reportWebVitals.js","index.js"],"names":["Task","taskL","onDelete","onToggle","className","reminder","onDoubleClick","id","text","style","color","justifyItems","cursor","onClick","eDate","NewTask","onAdd","useState","setText","moment","clone","format","monthSelect","setMonthSelect","daySelect","setDaySelect","yearSelect","setYearSelect","endMonthSelect","setEndMonthSelect","endDaySelect","setEndDaySelect","endYearSelect","setEndYearSelect","setReminder","startYear","year","endYear","selectYears","push","startMonth","startOf","endMonth","endOf","mon","subtract","months","isBefore","add","dates","i","onSubmit","e","preventDefault","sDate","alert","type","value","placeholder","onChange","target","defaultValue","map","month","day","checked","currentTarget","Tasks","tasks","setTasks","startDate","showAddTask","setShowAddTask","newTask","task","a","fetch","method","headers","body","JSON","stringify","res","json","data","length","Calendar","onXChange","useEffect","fetchTasks","tasksFromServer","getTasks","fetchTask","setStartDate","calendar","setCalendar","startDay","endDay","end","date","iendDay","Array","fill","weekNum","buildCalendar","firstMonth","lastMonth","deleteTask","filter","toggleReminder","taskToToggle","updTask","getMonthName","mons","isSame","arg","week","selectedDate","currDay","toString","showDate","App","styleRef","useRef","setValue","rel","href","ref","current","classList","toggle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a614040a.chunk.js","sourcesContent":["import {FaTimes} from 'react-icons/fa'\r\nconst Task = ({taskL, onDelete, onToggle}) => {\r\n    return (\r\n        <div className={`task ${taskL.reminder ? 'reminder' : ''}`} onDoubleClick={()=> onToggle(taskL.id)}>\r\n            <h3>{taskL.text}  <FaTimes style={{ color: 'red', justifyItems: 'right', cursor: 'pointer'}} onClick={()=>onDelete(taskL.id)}/></h3>\r\n            <p>Ends: {taskL.eDate}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Task\r\n","import React, { useState } from 'react'\r\nimport moment from 'moment'\r\nimport './Task.css';\r\n\r\nconst NewTask = ({ onAdd }) => {\r\n    const [text, setText] = useState('')\r\n    const [monthSelect, setMonthSelect] = useState(moment().clone().format(\"M\"))\r\n    const [daySelect, setDaySelect] = useState(moment().clone().format(\"DD\"))\r\n    const [yearSelect, setYearSelect] = useState(moment().clone().format(\"YYYY\"))\r\n    const [endMonthSelect, setEndMonthSelect] = useState('')\r\n    const [endDaySelect, setEndDaySelect] = useState('')\r\n    const [endYearSelect, setEndYearSelect] = useState('')\r\n    const [reminder, setReminder] = useState(false)\r\n    //year drop down\r\n    var startYear = moment().clone().year()\r\n    const endYear = moment().clone().year() + 10\r\n    const selectYears = [];\r\n    while (startYear <= endYear) {\r\n        selectYears.push(startYear)\r\n        startYear++;\r\n    }\r\n    //month drop down\r\n    const startMonth = moment().clone().startOf(\"year\")\r\n    const endMonth = moment().clone().endOf(\"year\")\r\n    const mon = startMonth.subtract(1, \"month\")\r\n    const months = [];\r\n    while (startMonth.isBefore(endMonth, \"month\")) {\r\n        months.push(mon.add(1, \"month\").clone())\r\n    }\r\n    //day drop down\r\n    const dates = [];\r\n    for (let i = 1; i <= 31; i++) {\r\n        dates.push(i)\r\n    }\r\n    const onSubmit =(e)=> {\r\n        e.preventDefault()\r\n        \r\n        if(!text) {\r\n            alert('Please add a task name')\r\n            return\r\n        }\r\n        \r\n        onAdd({text, sDate:monthSelect + '-' + daySelect + \"-\" + yearSelect, eDate: endMonthSelect + '-' + endDaySelect + '-' + endYearSelect, reminder})\r\n\r\n        setText('')\r\n        setMonthSelect('')\r\n        setDaySelect('')\r\n        setYearSelect('')\r\n        setEndMonthSelect('')\r\n        setEndDaySelect('')\r\n        setEndYearSelect('')\r\n        setReminder(false)\r\n    }\r\n    return (\r\n            <form className='new-task-form' onSubmit={onSubmit}>\r\n                <div className='form-control' >\r\n                    <label>Task</label>\r\n                    <input type='text' value={text} placeholder='Add New Task' onChange={(e)=>setText(e.target.value)}/>\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label>\r\n                        <span>Start</span>\r\n                    </label>\r\n                    <select className='select-month' value={monthSelect? monthSelect: 'none'} onChange={(e)=> setMonthSelect(e.target.value)}>\r\n                        <option value=\"none\"defaultValue=\"true\" >MONTH</option>\r\n                        {months.map(month => (<option key={month} value={month.format(\"M\")}>{month.format(\"MM\")}</option>))}\r\n                    </select>\r\n                    <select className='select-day' value={daySelect? daySelect: 'none'} onChange={(e)=> setDaySelect(e.target.value)}>\r\n                    <option value=\"none\" defaultValue=\"true\" >DAY</option>\r\n\r\n                        {dates.map(day => (<option key={day} value={day}>{day}</option>))}\r\n                    </select>\r\n                    <select className='select-year' value={yearSelect? yearSelect: 'none'} onChange={(e)=> setYearSelect(e.target.value)}>\r\n                    <option value=\"none\"  defaultValue=\"true\" >YEAR</option>\r\n                       {selectYears.map(year => (<option key={year} value={year}>{year}</option>))}\r\n                    </select>\r\n                    <label>\r\n                        <span>End</span>\r\n                    </label>\r\n                    <select className='select-month' value={endMonthSelect? endMonthSelect: 'none'} onChange={(e)=> setEndMonthSelect(e.target.value)}>\r\n                    <option value=\"none\"  defaultValue=\"true\" >MONTH</option>\r\n                        {months.map(month => (<option key={month} value={month.format(\"M\")}>{month.format(\"MM\")}</option>))}\r\n                    </select>\r\n                    <select className='select-day' value={endDaySelect? endDaySelect: 'none'} onChange={(e)=> setEndDaySelect(e.target.value)}>\r\n                    <option value=\"none\"  defaultValue=\"true\" >DAY</option>\r\n                        {dates.map(day => (<option key={day}>{day}</option>))}\r\n                    </select>\r\n                    <select className='select-year' value={endYearSelect? endYearSelect: 'none'}  onChange={(e)=> setEndYearSelect(e.target.value)}>\r\n                    <option value=\"none\"  defaultValue=\"true\" >YEAR</option>\r\n                       {selectYears.map(year => (<option key={year}>{year}</option>))}\r\n                    </select>\r\n                </div>\r\n                <div className='form-control form-control-check'>\r\n                    <label>Set Reminder</label>\r\n                    <input type='checkbox' checked={reminder} value={reminder} onChange={(e)=> setReminder(e.currentTarget.checked)}/>\r\n                </div>\r\n                <input type=\"submit\" value=\"Submit\" className=\"btn-block sub-btn\"></input>\r\n            </form>\r\n    )\r\n}\r\nexport default NewTask\r\n","import {useState} from 'react'\r\nimport Task from './Task'\r\nimport NewTask from './NewTask.js';\r\nimport './Task.css';\r\n\r\nconst Tasks =({tasks, setTasks, startDate, onDelete, onToggle})=> {\r\n  const [showAddTask, setShowAddTask] = useState(false)\r\n    //add new task\r\n  const newTask = async (task)=> {\r\n    \r\n    const res = await fetch(`http://localhost:5000/tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type' : 'application/json'        \r\n      },\r\n      body: JSON.stringify(task)\r\n    })\r\n    \r\n    const data= await res.json()\r\n    setTasks([...tasks, data])\r\n    \r\n    // const id = Math.floor(Math.random() * 10000) + 1\r\n    // const newT ={id, ...task}\r\n    // setTasks([...tasks, newT])\r\n  } \r\n  return (\r\n        <div className=\"task-container\">\r\n          <h2>Tasks</h2>\r\n          <button className=\"btn-add-task\" onClick={()=> setShowAddTask(!showAddTask)}>{showAddTask ? 'CLOSE': 'ADD'}</button>\r\n           {showAddTask && <NewTask tasks={tasks} startDate={startDate} onAdd={newTask} />}\r\n       \r\n          <div>{tasks.length > 0 ? tasks.map((task)=> (\r\n                <Task key={task.id} taskL={task} startDate={startDate} onDelete={onDelete} onToggle={onToggle}/>\r\n            )\r\n          ) : \"No Tasks!\"}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Tasks","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport buildCalendar from \"./buildCal\";\r\nimport Tasks from './Tasks.js';\r\nimport './Calendar.css'\r\n\r\nconst Calendar = ({ value, onXChange }) => {\r\n    const [tasks, setTasks] = useState([])\r\n    useEffect(()=>{\r\n        const getTasks = async ()=> {\r\n            const tasksFromServer = await fetchTasks()\r\n            setTasks(tasksFromServer)\r\n        }\r\n\r\n        getTasks()\r\n\r\n    }, [])\r\n    //fetch tasks\r\n    const fetchTasks = async () => {\r\n        const res = await fetch('http://localhost:5000/tasks')\r\n        const data = await res.json()\r\n\r\n        return data\r\n    }\r\n    const fetchTask = async (id) => {\r\n        const res = await fetch(`http://localhost:5000/tasks/${id}`)\r\n        const data = await res.json()\r\n\r\n        return data\r\n    }\r\n    const [startDate, setStartDate] = useState( ()=> {\r\n        return 0;\r\n    })\r\n    const [calendar, setCalendar] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        setStartDate(moment().format(\"YYYY-MM-DD\"))\r\n\r\n        setCalendar(buildCalendar(value));\r\n    }, [value])\r\n    \r\n    const mon = [];\r\n    const firstMonth = value.clone().startOf(\"year\").month();\r\n    const lastMonth = value.clone().endOf(\"year\").month();\r\n    \r\n    function getMonthName() {\r\n        for (let i = firstMonth; i <= lastMonth; ++i)\r\n            mon.push(i)\r\n        return mon;\r\n    }\r\n    function currMonthName() {\r\n        return value.format(\"MMM\");\r\n    }\r\n    function currYear() {\r\n        return value.format(\"YYYY\");\r\n    }\r\n    function nextMonth() {\r\n        return value.clone().add(1, \"month\")\r\n    }\r\n    function prevMonth() {\r\n        return value.clone().subtract(1, \"month\")\r\n    }\r\n    function setMonthName(arg) {\r\n        return value.clone().month(arg)\r\n    }\r\n    const showDate = (year, month, selectedDate) => {\r\n        const currDay = [startDate];\r\n        currDay.sDate = moment([year, month, selectedDate]).format(\"YYYY-MM-DD\").toString()\r\n        setStartDate(currDay);\r\n    }\r\n    const deleteTask = async (id) => {\r\n        await fetch(`http://localhost:5000/tasks/${id}`, {\r\n            method: 'DELETE',\r\n        })\r\n\r\n        setTasks(tasks.filter((task) => task.id !== id))\r\n    }\r\n    const toggleReminder = async (id) => {\r\n\r\n        const taskToToggle = await fetchTask(id)\r\n        const updTask = {...taskToToggle, reminder: !taskToToggle.reminder}\r\n\r\n        const res = await fetch(`http://localhost:5000/tasks/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(updTask)\r\n        })\r\n        const data = await res.json()\r\n        setTasks(tasks.map((task)=> task.id === id ? {...task, reminder: data.reminder} : task) )\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"calendar\">\r\n                <div className=\"month-select\">\r\n                    {getMonthName().map(mons =>\r\n                        <div key={mons} className={value.isSame(value.clone().month(mons), \"month\") ? \"selected-month\" : \"unselected-months\"} onClick={() => onXChange(setMonthName(mons))}>\r\n                            {moment().month(mons).format(\"MMM\")}\r\n                        </div>)}\r\n                </div>\r\n                <div className=\"month\">\r\n                    <div className=\"custom-element-bg current-month\">\r\n                        <i className=\"fas fa-angle-left prev\" onClick={() => onXChange(prevMonth())}></i>\r\n                            <h1>{currMonthName()} {currYear()} </h1>\r\n                        <i className=\"fas fa-angle-right next\" onClick={() => onXChange(nextMonth())}></i>\r\n                    </div>\r\n                    <div className=\"weekdays custom-element-bg\">\r\n                        <div>SUN</div>\r\n                        <div>MON</div>\r\n                        <div>TUE</div>\r\n                        <div>WED</div>\r\n                        <div>THU</div>\r\n                        <div>FRI</div>\r\n                        <div>SAT</div>\r\n                    </div>\r\n                        {calendar.map(week => <div key={week.toString()} className=\"weeks\">{\r\n                            week.map(day => \r\n                            <div key={day} \r\n                                className={(!(day.clone().month() === value.clone().month())) ? \r\n                                    \"fill-days\" : startDate.sDate === day.format(\"YYYY-MM-DD\") ? \r\n                                    (((day.year() === moment().year())&&(day.date()=== moment().date()) && (value.clone().month() === moment().month()))) ? \r\n                                    \"dates selected-date today custom-element-bg\" : 'dates selected-date' : (day.year() === moment().year() && day.date()=== moment().date()) && (value.clone().month() === moment().month()) ?\r\n                                    \"dates today custom-element-bg\" : \"dates\" } \r\n                                    onClick={((day.clone().month() === value.clone().month())) ? () => showDate(day.year(), day.month(), day.date()): ()=> \"\"}>\r\n                                <div> {day.clone().format(\"D\").toString()} </div>\r\n                            </div>)\r\n                        }\r\n                        </div>)}\r\n                </div>\r\n            </div>\r\n          <Tasks tasks={tasks} setTasks={setTasks} startDate={startDate} onDelete={deleteTask} onToggle={toggleReminder}/> \r\n        </div>\r\n    )\r\n}\r\nexport default Calendar\r\n","export default function buildCalendar(value) {\r\n    const startDay = value.clone().startOf(\"month\").startOf(\"week\");\r\n    const endDay = value.clone().endOf(\"month\").endOf(\"week\");\r\n    const day = startDay.clone().subtract(1, \"day\");\r\n    const calendar = [];\r\n    const totalWeekRows = 6;\r\n    const end = endDay.date();\r\n    function iendDay (end) {\r\n        return endDay.add(end, \"day\");\r\n    }\r\n        while (day.isBefore(endDay, \"day\")) {\r\n            calendar.push(\r\n                Array(7).fill(0).map(() => day.add(1, \"day\").clone())\r\n            );\r\n            //Fill the gap in the panel (Panel can hold a total of 6 rows)\r\n            const weekNum = calendar.length;\r\n            let weekDays = 7;\r\n            if(end === day.date() && endDay.month() === day.month() && weekNum < totalWeekRows) {\r\n                let rowsToFill =  totalWeekRows - weekNum;\r\n                iendDay(rowsToFill * weekDays);\r\n            }\r\n        }\r\n        return calendar;\r\n}\r\n\r\n","import React, { useRef, useState } from 'react'\r\nimport moment from 'moment'\r\nimport Calendar from './components/Calendar.js';\r\nimport './style.css';\r\n\r\nconst App = () => {\r\n    const styleRef = useRef();\r\n    function translate() {\r\n        styleRef.current.classList.toggle('nav-active');\r\n    }\r\n    const [value, setValue] = useState(moment());\r\n    return (\r\n        <div className=\"App\">\r\n            <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css\"\r\n            />\r\n                    <nav className=\"custom-element-bg\">\r\n                        <div className=\"logo\">\r\n                            <h4>HARRY J</h4>\r\n                        </div>\r\n                        <ul className=\"nav-links\" ref={styleRef}>\r\n                            <li>\r\n                                <a href=\"/#\">Home</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"/#\">Calendar</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"/#\">Projects</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"/#\">About</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"burger\" onClick={translate}>\r\n                            <div className=\"line1\"></div>\r\n                            <div className=\"line2\"></div>\r\n                            <div className=\"line3\"></div>\r\n                        </div>\r\n                    </nav>\r\n                        <Calendar value={value} onXChange={setValue}/>\r\n                    </div>\r\n        );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}